# First Missing Positive

Given an unsorted integer array `nums`, return the smallest positive integer that is not present in `nums`.

---

## Example 1

**Input:**  
```
3
1 2 0
```
**Output:**  
```
3
```
**Explanation:**  
The numbers in the range [1,2] are all in the array.

---

## Example 2

**Input:**  
```
4
3 4 -1 1
```
**Output:**  
```
2
```
**Explanation:**  
1 is in the array, but 2 is missing.

---

## Example 3

**Input:**  
```
5
7 8 9 11 12
```
**Output:**  
```
1
```
**Explanation:**  
The smallest positive integer, 1, is missing.

---

## Input format

- The first line of input contains an integer `n`, the size of the array.
- The second line contains `n` space-separated integers `num[i]`, representing the elements of the array.

## Output format

- The output displays the smallest positive integer that is missing from the array.

Refer to the sample output for the formatting specifications.

---

## Code constraints

- 2 ≤ n ≤ 10
- -100 ≤ nums[i] ≤ 100

---

## Sample test cases

**Input 1 :**
```
3
1 2 0
```
**Output 1 :**
```
3
```

**Input 2 :**
```
4
3 4 -1 1
```
**Output 2 :**
```
2
```

**Input 3 :**
```
5
7 8 9 11 12
```
**Output 3 :**
```
1
```

---
## Python 
```python []
def main():
    # Read the size of the array
    n = int(input())
    # Read the array elements and store them in a set for O(1) lookups
    st = set(map(int , input().split()))
    # Initialize result as n + 1 (maximum possible missing positive)
    res = n + 1
    # Check for the smallest missing positive integer in the range [1, n]
    for i in range(1 , n + 1):
        if i not in st:
            res = i
            break
    # Print the result
    print(res)

main()
```